import java.net.URLEncoder

pipeline {
    agent any

    tools {
        jdk 'JDK 17'
    }

    environment {
        REPOSITORY_NAME = 'share42-refactoring'
        REPOSITORY_ADDRESS = 'github.com/ProjectRefactoring/share42-refactoring.git'
        DOCKER_NETWORK_NAME = 'ubuntu_share42_net'

        SPRING_ROOT_PATH = 'share42-refactoring/AMAG_Project/Backend'
        SPRING_IMAGE_NAME = 'miracle3070/share42-spring:latest'
        SPRING_CONTAINER_NAME = 'spring-server'
        SPRING_PICTURE_PATH = '/home/ubuntu/images'
        SPRING_CONTAINER_PORT = '8088'
        SPRING_CONTAINER_IP = '172.42.1.1'

        REACT_ROOT_PATH = 'share42-refactoring/AMAG_Project/Frontend/ou42'
        REACT_IMAGE_NAME = 'miracle3070/share42-react:latest'
        REACT_CONTAINER_NAME = 'react-server'
        REACT_CONTAINER_PORT = '3000'
        REACT_CONTAINER_IP = '172.42.1.2'

        NGINX_PICTURE_PATH = '/usr/share/nginx/html/images/'
    }

    stages {
        stage('Remove Existing Environment') {
            steps {
                catchError {
                    echo 'Removing Existing Project Files'
                    sh "rm -rf ${env.REPOSITORY_NAME}"

                    echo 'Removing Existing Project Containers'
                    sh "docker rm -f ${env.SPRING_CONTAINER_NAME}"
                    sh "docker rm -f ${env.REACT_CONTAINER_NAME}"

                    echo 'Removing Existing Project Images'
                    sh "docker rmi ${env.SPRING_IMAGE_NAME}"
                    sh "docker rmi registry.hub.docker.com/${env.SPRING_IMAGE_NAME}"
                    sh "docker rmi ${env.REACT_IMAGE_NAME}"
                    sh "docker rmi registry.hub.docker.com/${env.REACT_IMAGE_NAME}"
                }
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out the Git repository using git clone...'
                script {
                    sh "git clone https://${env.REPOSITORY_ADDRESS}"
                }
            }
        }

        stage('Build Gradle') {
            steps {
                echo 'Building the Spring Boot project using Gradle...'
                dir("${env.SPRING_ROOT_PATH}") {
                    sh 'chmod 755 ./gradlew'
                    sh './gradlew clean build -x test'
                }
            }
        }

        stage('Docker Build Spring') {
            steps {
                echo 'Building Docker image...'
                dir("${env.SPRING_ROOT_PATH}") {
                    script {
                        def dockerImage = docker.build("${env.SPRING_IMAGE_NAME}")
                    }
                }
            }
        }

        stage('Docker Deploy Spring') {
            steps {
                echo 'Deploying Docker container...'
                script {
                    def dockerImage = docker.image("${env.SPRING_IMAGE_NAME}")
                    dockerImage.run("-p ${env.SPRING_CONTAINER_PORT}:${env.SPRING_CONTAINER_PORT} --ip ${env.SPRING_CONTAINER_IP} --network ${env.DOCKER_NETWORK_NAME} -v ${SPRING_PICTURE_PATH}:${SPRING_PICTURE_PATH} --name ${SPRING_CONTAINER_NAME} --hostname ${SPRING_CONTAINER_NAME}")
                }
            }
        }

        stage('Docker Build React') {
            steps {
                dir(path: "${env.REACT_ROOT_PATH}") {
                    script {
                        def dockerImage = docker.build("${env.REACT_IMAGE_NAME}")
                    }
                }
            }
        }

        stage('Docker Deploy React') {
            steps {
                script {
                    def dockerImage = docker.image("${env.REACT_IMAGE_NAME}")
                    dockerImage.run("-p ${env.REACT_CONTAINER_PORT}:${env.REACT_CONTAINER_PORT} --ip ${env.REACT_CONTAINER_IP} --network ${env.DOCKER_NETWORK_NAME} -v ${env.SPRING_PICTURE_PATH}:${env.NGINX_PICTURE_PATH} --name ${env.REACT_CONTAINER_NAME} --hostname ${REACT_CONTAINER_NAME}")
                }
            }
        }
    }
}